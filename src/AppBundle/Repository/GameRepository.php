<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Game;
use AppBundle\Entity\User;
use AppBundle\Entity\Vote;
use Doctrine\DBAL\LockMode;

/**
 * GameRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class GameRepository extends \Doctrine\ORM\EntityRepository
{
    public function findByUser(User $user)
    {
        return $this->createQueryBuilder('g')
            ->join('g.users', 'p')
            ->where('p.id = :user')
            ->getQuery()
            ->setLockMode(LockMode::PESSIMISTIC_WRITE)
            ->setParameters([
                'user' => $user
            ])
            ->getOneOrNullResult()
        ;
    }
    
    public function findCurrentGameForUser(User $user, $state = null)
    {
        /** @var Game $game */
        $query = $this->createQueryBuilder('g')
            ->join('g.users', 'p')
            ->andWhere('p.id = :user')
            ->andWhere("g.state != 'end'")
        ;
        if ($state !== null) {
            $query = $query
                ->andWhere('g.state = :state')
                ->setParameter('state', $state)
            ;
        }
        
        $game = $query
            ->orderBy('g.id', 'desc')
            ->setMaxResults(1)
            ->getQuery()
            ->setLockMode(LockMode::PESSIMISTIC_WRITE)
            ->setParameter('user', $user->getId())
            ->getOneOrNullResult()
        ;
        
        return $game;
    }

    public function getAllActiveGames()
    {
        return $this->createQueryBuilder('g')
            ->where("g.state != 'end'")
            ->getQuery()
            ->setLockMode(LockMode::PESSIMISTIC_WRITE)
            ->execute()
        ;
    }
    
    public function findRunningGames($chatGroup)
    {
         /** @var Game $game */
        return $this->createQueryBuilder('g')
            ->andWhere("g.state != 'end'")
            ->andWhere('g.chatGroup = :chatGroup')
            ->getQuery()
            ->setLockMode(LockMode::PESSIMISTIC_WRITE)
            ->setParameter('chatGroup', $chatGroup)
            ->execute()
        ;
    }
    
    public function findOneBy(array $criteria, array $orderBy = null)
    {
        $persister = $this->_em->getUnitOfWork()->getEntityPersister($this->_entityName);

        return $persister->load(
            $criteria,
            null,
            null,
            array(),
            LockMode::PESSIMISTIC_WRITE,
            1,
            $orderBy
        );
    }

    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        $persister = $this->_em->getUnitOfWork()->getEntityPersister($this->_entityName);
        $persister->lock($criteria, LockMode::PESSIMISTIC_WRITE);

        return $persister->loadAll($criteria, $orderBy, $limit, $offset);
    }

    public function updateGame(Game $game)
    {
        $this->getEntityManager()->persist($game);
        $this->getEntityManager()->flush();
    }

    public function recordVote(Vote $vote)
    {
        $this->getEntityManager()->persist($vote);
        $this->getEntityManager()->flush();
    }

    public function beginTransaction()
    {
        $this->_em->beginTransaction();
    }

    public function commit()
    {
        $this->_em->commit();
    }


}
